```{r 06_05_setup, include=FALSE}
# Global knitr options - controls all code chunks
knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  echo = FALSE
)

# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(gridExtra) # for arranging multiple plots
library(RColorBrewer) # for color palettes

# Load global configuration
source("../R/global_config.R")

# Load data
load("../data/all_observations_split.RData")
load("../data/all_land_cover_data.RData")

# --- Species Richness and Land Cover Analysis Functions ---

# Calculate species richness (number of species present) for each beach
calculate_beach_richness <- function(region_data) {
  # Get species columns - exclude "plot" and "id_beach"
  species_cols <- setdiff(names(region_data), c("plot", "id_beach"))

  # Group by beach and calculate presence of each species across the entire beach
  region_data %>%
    group_by(id_beach) %>%
    summarise(across(all_of(species_cols), ~ max(., na.rm = TRUE) > 0)) %>%
    # Replace -Inf with FALSE (happens when all values were NA and we used max with na.rm=TRUE)
    mutate(across(all_of(species_cols), ~ ifelse(is.infinite(.), FALSE, .))) %>%
    # Calculate richness as sum of species present
    mutate(richness = rowSums(across(all_of(species_cols))))
}

# Function to reshape land cover data for plotting
prepare_land_cover <- function(region_data) {
  region_data %>%
    pivot_longer(
      cols = -id_beach,
      names_to = "cover_type",
      values_to = "percentage"
    ) %>%
    # Extract the distance (50m or 100m) from the column name
    mutate(
      distance = ifelse(grepl("^x50m", cover_type), "50m", "100m"),
      # Clean up the cover type name by removing the distance prefix
      cover_type = gsub("^x(50|100)m_(.+)_percent$", "\\2", cover_type)
    )
}

# Calculate richness for each region at the beach level
girona_richness <- calculate_beach_richness(beaches_by_region$Girona) %>%
  mutate(region = "Girona")
barcelona_richness <- calculate_beach_richness(beaches_by_region$Barcelona) %>%
  mutate(region = "Barcelona")
tarragona_richness <- calculate_beach_richness(beaches_by_region$Tarragona) %>%
  mutate(region = "Tarragona")

# Combine richness data
all_richness <- bind_rows(girona_richness, barcelona_richness, tarragona_richness)

# Prepare land cover data for all regions
girona_land <- prepare_land_cover(land_cover_data$Girona) %>%
  mutate(region = "Girona")
barcelona_land <- prepare_land_cover(land_cover_data$Barcelona) %>%
  mutate(region = "Barcelona")
tarragona_land <- prepare_land_cover(land_cover_data$Tarragona) %>%
  mutate(region = "Tarragona")

# Combine all land cover data
all_land_cover <- bind_rows(girona_land, barcelona_land, tarragona_land)

# Join land cover data with species richness data for both 50m and 100m
richness_land_cover_50m <- all_richness %>%
  left_join(
    all_land_cover %>%
      filter(distance == "50m") %>%
      select(id_beach, region, cover_type, percentage),
    by = c("id_beach", "region")
  ) %>%
  mutate(distance = "50m")

richness_land_cover_100m <- all_richness %>%
  left_join(
    all_land_cover %>%
      filter(distance == "100m") %>%
      select(id_beach, region, cover_type, percentage),
    by = c("id_beach", "region")
  ) %>%
  mutate(distance = "100m")

# Combine both datasets
richness_land_cover_combined <- bind_rows(richness_land_cover_50m, richness_land_cover_100m)

# Order regions according to our standard order
all_richness <- order_provinces(all_richness, column_name = "region")

# Select the most relevant land cover types for analysis
relevant_cover_types <- c("urban", "forests", "scrubland", "crops", "grassland")

richness_vs_land <- richness_land_cover_combined %>%
  filter(cover_type %in% relevant_cover_types)

# Ensure regions maintain the consistent order
richness_vs_land <- order_provinces(richness_vs_land, column_name = "region")

# Reorder the factor levels for cover_type to control the column order
richness_vs_land$cover_type <- factor(richness_vs_land$cover_type, 
                                     levels = relevant_cover_types)
```

```{r}
#| label: fig-richness-vs-landcover
#| fig-cap: "Relationship between species richness and different land cover types at 50m and 100m distances, comparing how the surrounding environment at different scales impacts dune biodiversity"
#| echo: false
#| eval: true
#| output: true
#| message: false
#| warning: false
#| fig-width: 15
#| fig-height: 8

# Create scatter plots for richness vs. land cover with both distances
# Specify formula explicitly to avoid auto-message
ggplot(richness_vs_land, aes(x = percentage, y = richness, color = region)) +
  geom_point(alpha = 0.7, size = 2) +
  geom_smooth(method = "lm", formula = y ~ x, se = TRUE, linetype = "dashed") +
  # Use facet_grid to create rows for distances and columns for cover types
  facet_grid(distance ~ cover_type) +
  theme_minimal() +
  labs(
    title = "Species Richness vs. Land Cover Types at Different Distances",
    x = "Land Cover Percentage (%)",
    y = "Number of Species Present",
    color = "Region"
  ) +
  # Use our custom province colors
  scale_color_manual(values = PROVINCE_COLORS) +
  # Set x-axis limits to 0-100 for all facets
  scale_x_continuous(limits = c(0, 100), breaks = seq(0, 100, 25)) +
  theme(
    legend.position = "top",
    strip.background = element_rect(fill = "gray90"),
    strip.text = element_text(face = "bold"),
    axis.text.x = element_text(angle = 0),
    panel.spacing = unit(1, "lines"),
    panel.border = element_rect(color = "gray80", fill = NA)
  )

# Save the plot
ggsave("../figures/richness_vs_land_cover_combined.png", width = 15, height = 8)
```