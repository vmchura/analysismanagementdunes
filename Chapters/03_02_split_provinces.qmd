## Data Splitting by Province {#sec-Chapter2}

### Regional Division 

This chapter details the process of dividing the dataset by the three biogeographical zones (Girona, Barcelona, and Tarragona) for separate analysis. By splitting the data, we can better understand regional differences in dune vegetation patterns and management practices.

### Dataset Preparation

We use the main dataset with species observations to create the regional subsets.

```{r}
#| label: load-packages-chapter2
#| echo: false
#| eval: true
#| output: false
## Load required packages
library(tidyverse)

## Set conflicts resolution preference
conflicted::conflict_prefer("filter", "dplyr")
conflicted::conflict_prefer("select", "dplyr")
```

#### Loading the Processed Data

First, we load the saved processed data from the previous section.

```{r}
#| label: load-data-chapter2
#| echo: false
#| eval: true
#| output: false
## Load the saved data
load("../data/processed_data_clean.RData")

## Display the structure to confirm successful loading
str(main_data, max.level = 1)
```

#### Selecting Necessary Columns

Before splitting the data by region, we select only the necessary columns for our analysis:

```{r}
#| label: select-columns-chapter2
#| echo: false
#| eval: true
#| output: false
## Select only the columns needed: first column (plot), 
## columns from 2 to the one before eunis, and id_beach
main_data_selected <- main_data %>%
  select(plot, id_beach, 8:ncol(main_data))

```

This selection process preserves:

1. The plot identifier (`plot`)
2. The beach identifier (`id_beach`), which will be used for the regional split
3. All columns for the species

### Regional Split Implementation

The dataset is split into three regions based on the `id_beach` ranges, following the known geographical distribution of beaches:

```{r}
#| label: split-by-region
#| echo: false
#| eval: true
#| output: false
## Create a named list to store the regional data
beaches_by_region <- list()

## Split data by region according to id_beach ranges
beaches_by_region[["Girona"]] <- main_data_selected %>% filter(id_beach >= 1 & id_beach <= 19)
beaches_by_region[["Barcelona"]] <- main_data_selected %>% filter(id_beach >= 20 & id_beach <= 23)
beaches_by_region[["Tarragona"]] <- main_data_selected %>% filter(id_beach >= 24)
```

The beach ID ranges for each region are:

- **Girona**: Beach IDs 1-19
- **Barcelona**: Beach IDs 20-23
- **Tarragona**: Beach IDs 24 and above

#### Validation of Regional Splits

To ensure the split was performed correctly, we check the number of observations in each regional dataset:

```{r}
#| label: validate-split
#| echo: false
#| eval: true
#| output: false
## Check the structure and sizes
cat("Number of observations by region:\n")
cat("Girona:", nrow(beaches_by_region[["Girona"]]), "observations\n")
cat("Barcelona:", nrow(beaches_by_region[["Barcelona"]]), "observations\n")
cat("Tarragona:", nrow(beaches_by_region[["Tarragona"]]), "observations\n")

## Verify that the sum equals the original dataset size
total_observations <- sum(sapply(beaches_by_region, nrow))
cat("\nTotal observations across all regions:", total_observations, "\n")
cat("Original dataset observations:", nrow(main_data_selected), "\n")

## Check if all observations were assigned to a region
if(total_observations == nrow(main_data_selected)) {
  cat("Validation successful: All observations have been assigned to a region.\n")
} else {
  cat("Validation failed: The sum of regional observations doesn't match the original dataset.\n")
}
```

This validation step confirms that all observations from the original dataset have been correctly assigned to one of the three regions, with no data loss or duplication.

### Data Visualization

To visualize the distribution of data across regions, we can create a bar chart showing the number of observations per region:

```{r}
#| label: fig-regional-distribution
#| fig-cap: "Distribution of observations across the three regions"
#| echo: false
#| eval: true
#| output: true

## Create a data frame for plotting
region_counts <- data.frame(
  Region = names(beaches_by_region),
  Observations = sapply(beaches_by_region, nrow)
)

## Set the specific order of regions
region_counts$Region <- factor(region_counts$Region, levels = c("Tarragona", "Barcelona", "Girona"))

## Create the plot
ggplot(region_counts, aes(x = Region, y = Observations, fill = Region)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = Observations), vjust = -0.5) +
  theme_minimal() +
  labs(
    title = "Distribution of Observations by Region",
    x = "Region",
    y = "Number of Observations"
  ) +
  scale_fill_brewer(palette = "Set2") +
  # Add more space at the top to prevent cutting off the labels
  coord_cartesian(clip = "off") +  # Prevent clipping of text labels
  theme(plot.margin = margin(t = 20, r = 10, b = 10, l = 10, unit = "pt")) # Add more top margin
```

This visualization highlights the regional distribution of our data, which is important to consider when interpreting subsequent analyses.

### Saving the Regional Datasets

Finally, we save the regional datasets for future use:

```{r}
#| label: save-regional-data
#| echo: false
#| eval: true
#| output: false
## Save the regional data to an RData file
save(beaches_by_region, file = "../data/all_observations_split.RData")
cat("Regional datasets saved to 'data/all_observations_split.RData'\n")
```

### Summary

This chapter has:

1. Loaded the processed data from section [@sec-data-exploration-validation]
2. Selected the necessary columns for regional analysis
3. Split the dataset into three regions (Girona, Barcelona, and Tarragona)
4. Validated the regional split to ensure no data was lost
5. Visualized the distribution of observations across regions
6. Saved the regional datasets for subsequent analyses

In the following chapters, we will use these regional datasets to explore regional variations in dune vegetation patterns and their relationships with environmental factors and management practices.


